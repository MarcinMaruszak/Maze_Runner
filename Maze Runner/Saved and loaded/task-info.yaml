type: edu
custom_name: stage3
files:
- name: src/maze/Main.java
  visible: true
  text: |
    package maze;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import maze.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        Clue(int s) {
            size = s;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        public MazeRunnerTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("0"),

                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17)),

                new TestCase<Clue>()
                    .setInput("1\n15\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(15)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(15))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (clue == null && mazes.size() == 0) {
                return CheckResult.correct();
            } else if (clue == null) {
                return CheckResult.wrong(
                    "In this test no maze should be shown, but one was shown. " +
                        "Try to use \\u2588 character only to print the maze."
                );
            } else if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() > 1) {
                return CheckResult.wrong(
                    "Found " + mazes.size() + " mazes in the output. " +
                        "Should be only one maze."
                );
            }

            Maze maze = mazes.get(0);

            int entrances = maze.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = maze.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (maze.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + maze.getHeight() + ", but should be " + clue.size);
            }

            if (maze.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + maze.getWidth() + ", but should be " + clue.size);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/maze/domain/Edge.java
  visible: true
  text: |+
    package maze.domain;

    import java.util.Objects;

    public class Edge {
        private int startNode;
        private int endNode;
        private int weight;

        public Edge(int startNode, int endNode, int weight) {
            this.startNode = startNode;
            this.endNode=endNode;
            this.weight = weight;
        }

        public int getEndNode() {
            return endNode;
        }

        public int getStartNode() {
            return startNode;
        }

        public int getWeight() {
            return weight;
        }


        @Override
        public String toString() {
            return startNode +","+endNode +":" +weight +" ";
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Edge edge1 = (Edge) o;
            return startNode == edge1.startNode&&endNode==edge1.endNode||
                    startNode == edge1.endNode&&endNode==edge1.startNode;
        }

        @Override
        public int hashCode() {
            return Objects.hash(startNode);
        }
    }

  learner_created: true
- name: src/maze/UI/UserInterface.java
  visible: true
  text: |
    package maze.UI;

    import maze.domain.Maze;

    import java.util.Arrays;
    import java.util.Scanner;

    public class UserInterface {
        private Maze maze;
        Scanner scanner;

        public UserInterface(Scanner scanner) {
            this.scanner=scanner;
            this.maze = new Maze();
        }

        public void start(){
            System.out.println("Please, enter the size of a maze");
            int [] size = Arrays.stream(scanner.nextLine().split(" "))
                    .mapToInt(Integer::parseInt).toArray();
            maze.setMaze(size);
            maze.generate();
            maze.print();
        }
    }
  learner_created: true
- name: src/maze/domain/Maze.java
  visible: true
  text: |
    package maze.domain;

    import java.util.*;

    public class Maze {
        private int [][] maze;
        private int height;
        private int width;
        private ArrayList<LinkedHashSet<Edge>> adjacencyList;
        private LinkedHashSet<Edge> tree;
        private Edge end;

        public Maze() {}

        public void setMaze(int[] size) {
            this.height=  (size[0]-1)/2;
            this.width =(size[1]-1)/2;
            this.maze = new int[size[0]-2][size[1]-2];
            this.adjacencyList = new ArrayList<>();
            this.tree=new LinkedHashSet<>();
        }

        public void generate() {
            generateAdjacency();
            printAdj();
            generateMST();
            printTree();
            generateWalls();
        }


        private void generateAdjacency(){
            for(int i =0;i<height*width;i++){
                adjacencyList.add(null);
            }
            for (int node =0;node<width*height;node++){
                adjacencyList.set(node,addAllNodes(node));
            }
        }

        private LinkedHashSet<Edge> addAllNodes(int nodeMain){
            LinkedHashSet<Edge> nodesList;
            try {
                nodesList = new LinkedHashSet<>(adjacencyList.get(nodeMain));
            } catch (Exception e) {
                nodesList = new LinkedHashSet<>();
            }
            int weight=new Random().nextInt(99)+1;

            if (nodeMain%width!=width-1) {
                addNode(nodesList, nodeMain,nodeMain+1, weight);
                addSymmetricHorizontal(nodeMain+1,weight);
            }
            weight=new Random().nextInt(99)+1;
            addNode(nodesList,nodeMain, nodeMain+width, weight);
            addSymmetricVertical(nodeMain+width,weight);
            return nodesList;
        }

        private void addSymmetricHorizontal(int nodeMain, int weight){
            LinkedHashSet<Edge> nodesList;
            try {
                nodesList = new LinkedHashSet<>(adjacencyList.get(nodeMain));
            } catch (Exception e) {
                nodesList = new LinkedHashSet<>();
            }
            addNode(nodesList,nodeMain,nodeMain-1,weight);
            try {
                adjacencyList.set(nodeMain,nodesList);
            } catch (Exception ignored) { }
        }

        private void addSymmetricVertical(int nodeMain, int weight){
            LinkedHashSet<Edge> nodesList;
            try {
                nodesList = new LinkedHashSet<>(adjacencyList.get(nodeMain));
            } catch (Exception e) {
                nodesList = new LinkedHashSet<>();
            }
            addNode(nodesList,nodeMain, nodeMain-width,weight);
            try {
                adjacencyList.set(nodeMain,nodesList);

            } catch (Exception ignored) { }
        }


        private void addNode(LinkedHashSet<Edge> edges, int startNode,  int endNode, int weight){
            if(startNode>=0&&startNode<height*width&&endNode>=0&&endNode<height*width){
                edges.add(new Edge(startNode,endNode,weight));
            }
        }

        private void generateMST(){
            LinkedHashSet<Edge> list=new LinkedHashSet<>(adjacencyList.get(0));
            Edge edge =list.stream().min(Comparator.comparingInt(Edge::getWeight)).get();
            list.remove(edge);
            remove(edge);
            tree.add(edge);

            while (true){
                LinkedHashSet<Integer> nodes  = new LinkedHashSet<>();
                for(Edge e : tree){
                    nodes.add(e.getStartNode());
                    nodes.add(e.getEndNode());
                }
                list=new LinkedHashSet<>();

                for(int n : nodes){
                    list.addAll(adjacencyList.get(n));
                }
                edge =list.stream().min(Comparator.comparingInt(Edge::getWeight)).get();

                adjacencyList.get(edge.getStartNode()).remove(edge);
                if(!containsNode(edge)){
                    tree.add(edge);
                }
                int j=0;
                for(LinkedHashSet<Edge> list1 : adjacencyList){
                    if(list1.isEmpty()){
                        j++;
                    }
                }
                if(j==adjacencyList.size()){
                    end=edge;
                    break;
                }
            }
            for(Edge e : new LinkedHashSet<>(tree)){
                if(e.getStartNode()>e.getEndNode()){
                    tree.remove(e);
                    tree.add(new Edge(e.getEndNode(),e.getStartNode(),e.getWeight()));
                }
            }
        }

        private boolean containsNode(Edge edge){
            LinkedHashSet<Integer> nodes = new LinkedHashSet<>();
            for(Edge e: tree){
                nodes.add(e.getStartNode());
                nodes.add(e.getEndNode());
            }
            return nodes.contains(edge.getStartNode())&&nodes.contains(edge.getEndNode());
        }

        private void remove(Edge edge){
            LinkedHashSet<Edge> list = adjacencyList.get(edge.getEndNode());
            list.remove(new Edge(edge.getEndNode(),edge.getStartNode(),0));
         }

        private void generateWalls() {
            for( int row = 0;row< maze.length;row++ ){
                for(int col=0;col<maze[0].length;col++) {
                    if (row%2!=0||col%2!=0) {
                        maze[row][col] = 1;
                    }
                }
            }

            for(Edge n : tree){
                if((n.getStartNode()-n.getEndNode())==-1){
                    int row = n.getEndNode()/width;
                    row=row>=1?row*2:row;
                    int col = n.getStartNode()%width+(n.getEndNode()%width);
                    maze[row][col]=0;
                }else {
                    int row = n.getStartNode()/width+(n.getEndNode()/width);
                    int col =(n.getEndNode()%width*2);
                    maze[row][col]=0;
                }
            }
        }

        public void printAdj() {
            for (LinkedHashSet<Edge> edges : adjacencyList) {
                System.out.println(edges);
            }
        }

        public void printTree(){
            System.out.println(tree);
        }

        public void print() {
            for(int i =0;i<maze[0].length+2;i++){
                System.out.print("\u2588\u2588");
            }
            System.out.println();
            for(int row =0; row<maze.length; row++){
                System.out.print(row==0?"  ":"\u2588\u2588");
                for(int col=0; col<maze[0].length; col++){
                    System.out.print(maze[row][col]==0?"  ":"\u2588\u2588");
                }
                System.out.println(row== maze.length/2?"  ":"\u2588\u2588");
            }
            for(int i =0;i<maze[0].length+2;i++) {
                System.out.print("\u2588\u2588");
            }
        }
    }
  learner_created: true
- name: test_maze.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/47/stages/253/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/47/stages/253/implement">JetBrains
    Academy</a>
  time: Wed, 21 Oct 2020 22:59:26 UTC
record: 3
